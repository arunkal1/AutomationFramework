// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AutomationUI.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Assignment2-UITest1")]
    public partial class Assignment2_UITest1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Assignment2-UITest1.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Assignment2-UITest1", "\tAssignment 2: Test a flow and product results with Test Automation Technique", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("UNiDAYS Navigation Journey")]
        [NUnit.Framework.CategoryAttribute("Assignment2")]
        [NUnit.Framework.TestCaseAttribute("01-personalEmailOnly", "personalEmail@mail.com", "", "", "", "", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("02-confirmPersonalEmailOnly", "", "personalEmail@mail.com", "", "", "", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("03-passwordOnly", "", "", "p4$$w0rd123.", "", "", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("04-confirmPasswordOnly", "", "", "", "p4$$w0rd123.", "", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("05-genderOnlyMale", "", "", "", "", "Male", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("06-genderOnlyFemail", "", "", "", "", "Female", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("07-genderOnlyPreferNotToSay", "", "", "", "", "Prefer not to say", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("08-acceptTermsOnly", "", "", "", "", "", "Yes", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("09-allFiledInGenderMale", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Male", "Yes", "success", null)]
        [NUnit.Framework.TestCaseAttribute("10-allFiledInGenderFemale", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Female", "Yes", "success", null)]
        [NUnit.Framework.TestCaseAttribute("11-allFiledInGenderPreferNotToSay", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Prefer not to say", "Yes", "success", null)]
        [NUnit.Framework.TestCaseAttribute("12-acceptTermsMissingGenderMale", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Male", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("13-acceptTermsMissingGenderFemale", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Female", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("14-acceptTermsMissingGenderPreferNotToSay", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Prefer not to say", "", "allFieldsNotEntered", null)]
        [NUnit.Framework.TestCaseAttribute("15-incorrectFormatEmailGenderMale", "INCORRECTEMAILFORMAT", "INCORRECTEMAILFORMAT", "p4$$w0rd123.", "p4$$w0rd123.", "Male", "Yes", "validationError", null)]
        [NUnit.Framework.TestCaseAttribute("16-incorrectFormatEmailGenderFemale", "INCORRECTEMAILFORMAT", "INCORRECTEMAILFORMAT", "p4$$w0rd123.", "p4$$w0rd123.", "Female", "Yes", "validationError", null)]
        [NUnit.Framework.TestCaseAttribute("17-incorrectFormatEmailGenderPreferNotToSay", "INCORRECTEMAILFORMAT", "INCORRECTEMAILFORMAT", "p4$$w0rd123.", "p4$$w0rd123.", "Prefer not to say", "Yes", "validationError", null)]
        [NUnit.Framework.TestCaseAttribute("18-personalEmailAndConfirmPersonalEmailDoNotMatch", "personalEmail{{dateTimeStamp}}@mail.com", "wrongEmail@mail.com", "p4$$w0rd123.", "p4$$w0rd123.", "Male", "Yes", "validationError", null)]
        [NUnit.Framework.TestCaseAttribute("19-passwordAndConfirmPasswordDoNotMatch", "personalEmail{{dateTimeStamp}}@mail.com", "personalEmail{{dateTimeStamp}}@mail.com", "p4$$w0rd123.", "wrongPassword", "Male", "Yes", "validationError", null)]
        public void UNiDAYSNavigationJourney(string testName, string personalEmailAddress, string confirmPersonalEmailAddress, string password, string confirmPassword, string gender, string acceptTerms, string successOrFailure, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Assignment2"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("testName", testName);
            argumentsOfScenario.Add("personalEmailAddress", personalEmailAddress);
            argumentsOfScenario.Add("confirmPersonalEmailAddress", confirmPersonalEmailAddress);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("confirmPassword", confirmPassword);
            argumentsOfScenario.Add("gender", gender);
            argumentsOfScenario.Add("acceptTerms", acceptTerms);
            argumentsOfScenario.Add("successOrFailure", successOrFailure);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("UNiDAYS Navigation Journey", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("the user navigates to the following URL \'https://www.myunidays.com/\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.And("confirms the homepage has loaded and all navigation tabs are clickable and displa" +
                        "y content", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 8
 testRunner.When("the user clicks on the join now tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "personalEmailAddress",
                            string.Format("{0}", personalEmailAddress)});
                table1.AddRow(new string[] {
                            "confirmPersonalEmailAddress",
                            string.Format("{0}", confirmPersonalEmailAddress)});
                table1.AddRow(new string[] {
                            "password",
                            string.Format("{0}", password)});
                table1.AddRow(new string[] {
                            "confirmPassword",
                            string.Format("{0}", confirmPassword)});
                table1.AddRow(new string[] {
                            "gender",
                            string.Format("{0}", gender)});
                table1.AddRow(new string[] {
                            "acceptTerms",
                            string.Format("{0}", acceptTerms)});
                table1.AddRow(new string[] {
                            "successOrFailure",
                            string.Format("{0}", successOrFailure)});
#line 9
 testRunner.Then("the user enters the registration information into the join now form", ((string)(null)), table1, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
